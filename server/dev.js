const path = require('path')
const webpack = require('webpack')
const MFS = require('memory-fs')
const clientConfig = require('../config/webpack.client')
const ssrConfig = require('../config/webpack.ssr')

const readFile = (filesystem, dir, file) => {
  try {
    return filesystem.readFileSync(path.join(dir, file), 'utf-8')
  } catch (e) {}
}

module.exports = function setupDevServer(app, cb) {
  let bundle, clientManifest
  let done
  const readyPromise = new Promise(resolve => {
    done = resolve
  })
  const ready = (...args) => {
    done()
    cb(...args) // eslint-disable-line
  }

  if (process.env.NODE_ENV !== 'production') {
    const launchEditor = require('launch-editor-middleware')
    app.use('/__open-in-editor', launchEditor())
  }

  // modify client config to work with hot middleware
  clientConfig.entry.app = ['webpack-hot-middleware/client', clientConfig.entry.app]
  clientConfig.output.filename = '[name].js'
  clientConfig.plugins = clientConfig.plugins || []
  clientConfig.plugins.push(
    new webpack.NamedModulesPlugin(),
    new webpack.HotModuleReplacementPlugin(),
    new webpack.NoEmitOnErrorsPlugin(),
  )

  // dev middleware
  const clientCompiler = webpack(clientConfig)
  const clientOutputPath = clientConfig.output.path
  const devMiddleware = require('webpack-dev-middleware')(clientCompiler, {
    publicPath: clientConfig.output.publicPath,
    noInfo: true,
  })
  app.use(devMiddleware)
  clientCompiler.plugin('done', stats => {
    stats = stats.toJson()
    stats.errors.forEach(err => console.error(err))
    stats.warnings.forEach(err => console.warn(err))
    if (stats.errors.length) return

    clientManifest = JSON.parse(
      readFile(devMiddleware.fileSystem, clientOutputPath, 'vue-client-manifest.json'),
    )
    if (bundle) ready(bundle, { clientManifest })
  })

  // hot middleware
  app.use(require('webpack-hot-middleware')(clientCompiler, { heartbeat: 5000 }))

  // watch and update server renderer
  const serverCompiler = webpack(ssrConfig)
  const mfs = new MFS()
  const serverOutputPath = ssrConfig.output.path
  serverCompiler.outputFileSystem = mfs
  serverCompiler.watch({}, (err, stats) => {
    if (err) throw err
    stats = stats.toJson()
    if (stats.errors.length) return

    // read bundle generated by vue-ssr-webpack-plugin
    bundle = JSON.parse(readFile(mfs, serverOutputPath, 'vue-ssr-manifest.json'))
    if (clientManifest) ready(bundle, { clientManifest })
  })

  return readyPromise
}
